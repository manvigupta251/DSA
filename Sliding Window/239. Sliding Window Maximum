class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> result;
        deque<int> dq;

        int i;
        for(i = 0; i<k; i++){
            //push
            //pr ab hume monotonic decreasing maintain karna hain
            while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
            //ab jo dalega decreasing order main dala hain
            dq.push_back(i);
        }
        result.push_back(nums[dq.front()]);

        while(i<nums.size()){
            //size of deque maintain
            if(!dq.empty() && i-k >= dq.front()) dq.pop_front();

            //pr ab hume monotonic decreasing maintain karna hain
            while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
            //ab jo dalega decreasing order main dala hain
            dq.push_back(i);

            result.push_back(nums[dq.front()]);
            i++;
        }

        return result;
    }
};
