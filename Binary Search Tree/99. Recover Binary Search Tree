/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int> &inorderArr){
        if(!root) return;

        //iorder->left root right
        inorder(root->left, inorderArr);

        inorderArr.push_back(root->val);

        inorder(root->right, inorderArr);
    }

    void correctTree(TreeNode* root, vector<int> inorderArr, int &indx){
        if(!root) return;
        //left
        correctTree(root->left, inorderArr, indx);

        root->val = inorderArr[indx++];

        correctTree(root->right, inorderArr, indx);

    }

    void recoverTree(TreeNode* root) {
        //first approach 
        //inorder swap 
        //find conflicts and put inorder in again to tree
        vector<int> inorderArr;
        inorder(root, inorderArr);
        int first = -1;
        int last = -1;

        for(int i = 0; i<inorderArr.size()-1; i++){
            if(inorderArr[i] > inorderArr[i+1]){
                if(first == -1){
                    first = i;
                }
                last = i+1;
            }
        }
        swap(inorderArr[first], inorderArr[last]);

        int indx = 0;
        correctTree(root, inorderArr, indx);
        return ;
    }
};
