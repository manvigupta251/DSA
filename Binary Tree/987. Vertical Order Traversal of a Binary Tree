/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int, map<int, multiset<int>>> mp;
        queue<pair<TreeNode*, pair<int, int>>> q;
        q.push({root, {0,0}});
        while(!q.empty()){
            TreeNode* node = q.front().first;
            int level = q.front().second.second;
            int vertical = q.front().second.first;
            q.pop();
            mp[vertical][level].insert(node->val);
            if(node->left != NULL){
                q.push({node->left,{vertical-1, level+1}});
            }
            if(node->right != NULL){
                q.push({node->right,{vertical+1, level+1}});
            }
        }
        for(auto it: mp){
            vector<int> eachlevel;
            for(auto j: it.second){
                eachlevel.insert(eachlevel.end(), j.second.begin(), j.second.end());
            }
            ans.push_back(eachlevel);
        }
        return ans;
    }
};
