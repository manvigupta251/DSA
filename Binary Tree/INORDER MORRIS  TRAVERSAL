/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//MORISS TRAVERSAL FOR TREE
//FIRST THREADS CONCEPTAS BACKTRACKING DONT EXIST WE NEED THREADS TO LINK
//AS THIS IS INORDER -> LEFT ROOT RIGHT SO BEFORE MOVING TO LEFT FROM ROOT
//LINK THE LEFT KA RIGHTMOST TO ROOT THRN MOVE RIGHT ALSO IF THREAD EXIST REMOVE IF NOT MAKE ONE


class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        //in-> left root right
        vector<int> ans;

        TreeNode* curr = root;

        while(curr != NULL){
            //if root -> left exist
            if(curr->left == NULL){
                ans.push_back(curr->val);
                curr = curr->right;
            }
            else{
                //now left is there now check rightmost and link
                //agr left ka right not there print root
                TreeNode* temp = curr->left;
                while(temp->right != NULL && temp->right != curr){
                    temp = temp->right;
                }
                //thread created
                if(temp->right == NULL){
                    temp->right = curr;
                    curr = curr->left; //now thread banadi ab left jaa skte hain
                } 

                else if(temp->right == curr){
                    //thread exist already
                    //go to right now
                    ans.push_back(curr->val);
                    curr = curr->right;
                    temp->right = NULL;
                }   

            }
        }
        return ans;
    }
};
