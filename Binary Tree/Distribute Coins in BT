/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int moves = 0;
    int dfs(TreeNode* root){
        if(!root) return 0;

        int left = dfs(root->left);
        int right = dfs(root->right);

        // We calculate the number of moves by adding the absolute values of the number of coins each child needs to exchange with its parent node.
        //3 and -1 3 moves to provide parent then -1 wale chld ko fulfill so 4 moves
        moves += abs(left) + abs(right);

        return root->val-1 + left + right;
    }

    int distributeCoins(TreeNode* root) {
        //isme jo bhi hain sbko ek coin rkhna hain baki upar pass 
        //koi bhi order main traverse suppose left root right
        //answer is always possible tbhi this approach works
        dfs(root);
        return moves;

    }
};
