/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string solve(TreeNode* root, int &cam){
        if(!root) return "ok";

        string left = solve(root->left, cam);
        string right = solve(root->right, cam);

        if(left == "need" || right == "need"){
            cam++;
            return "provide";
        }
        //ab if child dont want 
        if(left == "provide" || right == "provide") return "ok";
        return "need";
    }

    int minCameraCover(TreeNode* root) {
        //we will see if any node have camera or not if not so we will see if it needs or is already covered
        //agr kisi bhi child ne need kaha toh parent ko provide karn ahoga
        //so now parent will return ok kyuki na use na uske children ko chahiye
        //agr kuch ni isme se toh need cause major root ko cover ni kia ne fir
        int cam = 0;

        if("need" == solve(root, cam)){
            cam++;
        }
        return cam;
    }
};
