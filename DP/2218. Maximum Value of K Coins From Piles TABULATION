class Solution {
public:
    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        int n = piles.size();
        //in recursion -> indx -> 0 - n-1 so in bottom up -> n-1 se 0
        //k k->0 now 0->k
        //base case k==0 ya indx == n return 0;
        vector<vector<int>> dp(n+1, vector<int>(k+1, 0));

        //k + 1 (for coins):
        // This extra column handles the case where we have 0 coins left to pick (k == 0).
        // This represents the base case where we can't pick any more coins, and the result should naturally be 0.
        // Including 0 ensures we cover all valid states from 0 to k.

        for(int indx = n-1; indx >= 0; indx--){
            for(int coins = 0; coins<=k; coins++){
                //not pick
                int notpick = dp[indx + 1][coins];
                //i == n-1 i+1 n so ilsie n+1 size

                //int pick
                int sum = 0, pick = 0;
                for (int j = 0; j < min((int)piles[indx].size(), coins); j++) {
                    sum += piles[indx][j];
                    pick = max(pick, sum + dp[indx + 1][coins - (j + 1)]);
                }

                // Take the best option
                dp[indx][coins] = max(notpick, pick);
            }
        }
        return dp[0][k];
    }
};
