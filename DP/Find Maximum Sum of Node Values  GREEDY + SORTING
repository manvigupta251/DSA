class Solution {
public:
    #define ll long long
    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {
        //now simple method is to find diff nums[i] & nums[i]^k create and sare even time add
        ll nodeSum = 0;
        vector<int> diff;

        for(int i = 0; i < nums.size(); i++) {
            diff.push_back((nums[i] ^ k) - nums[i]);
            nodeSum += 1ll * nums[i];
        }

        sort(diff.begin(), diff.end(), greater<int>());

        //sirf even time lenge
        for(int i = 0; i<diff.size(); i+=2){
            if(i+1 == diff.size()) break;

            ll pairSum = diff[i] + diff[i+1];

            if(pairSum > 0) nodeSum += pairSum;
        }
        return nodeSum;

    }
};
