class Solution {
public:
    vector<vector<int>> dp;

    int solve(int i, int j, vector<int> cuts) {
        if (i > j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int mincost = INT_MAX;
        // costof one cut is the length of the stick to be cut

        for (int k = i; k <= j; k++) {
            int len = cuts[j+1] - cuts[i-1] + solve(i, k-1, cuts) + solve(k + 1, j, cuts);
            mincost = min(mincost, len);
        }
        return dp[i][j] = mincost;
    }

    int minCost(int n, vector<int>& cuts) {
        // ab hume cuts array ko partition karn hain ki kb cut mare
        // 5 6 1 4 2
        //   i     j
        // 1 2 3 4 5 6 7 8 9
        //   i       k     j
        sort(cuts.begin(), cuts.end());
        int m = cuts.size();
        dp.resize(m+1, vector<int>(m+1, -1));
        cuts.insert(cuts.begin(), 0);
        cuts.push_back(n);
        int p = cuts.size();
        return solve(1, m, cuts);
    }
};
