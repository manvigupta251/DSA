class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        //hash array and parent arr method
        vector<int> hashArr(n, 1);
        vector<int> parent(n);
        for(int i = 0; i<n; i++) parent[i] = i;
        
        for(int i = 1; i<n; i++){
            for(int prev = 0; prev<i; prev++){
                if(arr[i] > arr[prev] && hashArr[prev]+1 > hashArr[i]){
                    hashArr[i] = hashArr[prev]+1;
                    parent[i] = prev;
                }
            }
        }
        
        //first maxi found break
        int maxi = -1;
        int maxCnt = -1;
        
        for(int i = 0; i<n; i++){
            if(hashArr[i] > maxCnt){ //lexico small chahiye islie first
                maxi = i;
                maxCnt = hashArr[i]; 
            }
        }
        
        vector<int> ans;
        ans.push_back(arr[maxi]);
        
        while(parent[maxi] != maxi){
            maxi = parent[maxi];
            ans.push_back(arr[maxi]);
        }
        
        sort(ans.begin(), ans.end());
        return ans;
    }
};
