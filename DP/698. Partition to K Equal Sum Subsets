class Solution {
public:
    bool solve(int indx, vector<int> &nums, int n, int k, int &target, vector<int> &visited, int currSum){
        //visited to make sure same element is not used more than once
        if(k == 0) return true;

        if(currSum > target) return false;

        if(currSum == target){
            return solve(0, nums, n, k-1, target, visited, 0);
        }

        for(int i = indx; i<n; i++){
            if(!visited[i]){
                visited[i] = 1;
                
                if(solve(i+1, nums, n, k, target, visited, currSum + nums[i])) return true;
                visited[i] = 0;
               
            }
        }
        
        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum % k != 0) return false;

        int target = sum/k;

        //now divide array elements into multiple subsets having sum equal target
        int n = nums.size();
        vector<int> visited(n, 0);
        return solve(0, nums, n, k, target, visited, 0);
    }
};
