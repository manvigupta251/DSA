/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* dummyNode = new ListNode(-1);
        ListNode* temp = dummyNode;

        while(l1 && l2){
            if(l1->val < l2->val){
                temp->next = l1;
                temp = temp->next;
                l1 = l1->next;
            }

            else{
                temp->next = l2;
                temp = temp->next;
                l2 = l2->next;
            }
        }

        if(l1) temp->next = l1;
        if(l2) temp->next = l2;

        return dummyNode->next;
    }

    ListNode* solve(int i, int n, vector<ListNode*>& lists){
        if(i == n-1) return lists[i];

        ListNode* node = solve(i+1, n, lists);

        return merge(node, lists[i]);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        if (n == 0) return nullptr;
        return solve(0, n, lists);
    }
};
