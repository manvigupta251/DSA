/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* dist(Node* headCpy, Node* newListCpy, Node* randomNode){
        if(randomNode == NULL) return NULL;

        while(headCpy != randomNode){
            headCpy = headCpy->next;
            newListCpy = newListCpy->next;
        }

        return newListCpy;
    }

    Node* copyRandomList(Node* head) {
        if (!head) return NULL;
        //now to make deep copy its easy to copy the next pointer
        //but how to cpopy random pointer cause it can be pointing anywhere
        //first way to see how far is random pointer node from node 
        //then utna hi dist add and reach and link
        Node* newList = new Node(head->val);

        Node* temp = head->next; Node* newtemp = newList;

        while(temp){
            newtemp->next = new Node(temp->val);
            newtemp = newtemp->next;
            temp = temp->next;
        } 
        //normal pinters done

        //now for random check distance func call
        temp = head, newtemp = newList;
        Node* headCpy = head;
        Node* newListCpy = newList;
        while(temp){
            newtemp->random = dist(headCpy, newListCpy,temp->random);
            
            newtemp = newtemp->next;
            temp = temp->next;
        }

        return newList;
    }
};
