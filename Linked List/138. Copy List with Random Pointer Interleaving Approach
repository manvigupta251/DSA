/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        //interleaving method
        //head newlist head->next newList ka next
        //1 og 1 deep copy 2 og 2 copy ....
        if(!head) return NULL;
        
        //INTERLEAVING
        Node* temp = head;
        while (temp) {
            Node* copy = new Node(temp->val);
            copy->next = temp->next;
            temp->next = copy;
            temp = copy->next;
        }

        //1-1-2-2-3-3.....
        temp = head;

        //now random connect
        while(temp){
            if(temp->random){
                temp->next->random = temp->random->next;
            }

            // temp->next->random = temp->random->next;
            temp = temp->next->next;
        }

        //now disconnection
        Node* newHead = head->next;
        Node* copyTemp = newHead;
        temp = head;

        while (temp) {
            temp->next = temp->next->next;
            if (copyTemp->next) {
                copyTemp->next = copyTemp->next->next;
            }
            temp = temp->next;
            copyTemp = copyTemp->next;
        }

        return newHead;
    }
};
