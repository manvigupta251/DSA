/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* curr, ListNode* prev){
        //base case
        if(curr == NULL) return prev;

        ListNode* front = curr->next;

        curr->next = prev;
        return reverse(front, curr);
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // ListNode* l1Head = reverse(l1, nullptr);
        // ListNode* l2Head = reverse(l2, nullptr);

        //345
        //465
        ListNode* temp1 = l1;
        ListNode* temp2 = l2;

        ListNode* addedList = new ListNode(-1);
        ListNode* addHead = addedList;
        int carry = 0;

        while(temp1 && temp2){
            int sum = carry + temp1->val + temp2->val;

            ListNode* newNode = new ListNode(sum%10);
            
            addHead->next = newNode;
            addHead = addHead->next;
            carry = sum/10;

            temp1 = temp1->next;
            temp2 = temp2->next;
        }        

        while(temp1){
            int sum = carry + temp1->val;
            ListNode* newNode = new ListNode(sum%10);

            addHead->next = newNode;
            addHead = addHead->next;

            carry = sum/10;
            temp1 = temp1->next;
        }

        while(temp2){
            int sum = carry + temp2->val;
            ListNode* newNode = new ListNode(sum%10);

            addHead->next = newNode;
            addHead = addHead->next;

            carry = sum/10;
            temp2 = temp2->next;
        }

        while(carry){
            int sum = carry;
            ListNode* newNode = new ListNode(sum%10);

            addHead->next = newNode;
            addHead = addHead->next;

            carry = sum/10;
        }
        //return reverse(addedList->next, nullptr);
        return addedList->next;
    }
};
