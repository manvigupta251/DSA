/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        //first link last and first node together k can be 0
        //also k can be more than list size do mod so that extra iterations are reduced
        //then traverse k times make head to next and disconnect lists
        ListNode* temp = head;

        if(!head || k == 0) return head;
        int cnt = 1;

        while(temp->next){
            cnt++;
            temp=temp->next;
        }

        temp->next = head;

        k %= cnt;
        k = cnt - k;

        while(k!=0){
            
            temp=temp->next; 
            k--;
        }
        head=temp->next;
        temp->next=NULL;
        return head;
    }
};
