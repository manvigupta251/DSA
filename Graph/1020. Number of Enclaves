class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        // ab yeh batana hain konsa 1 hain jo nahi bahar ja paega grid ke
        //jo boundary pr hain woh sure jaa paenge usse connected 4 dir wale bhi tap apenge
        //baki jo surrounded with zero beech main hain woh bache wahi return karne hain
        //toh boundary one visited karo mark plus neighbor in four dir baki bache we answer
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int,int>> q;
        vector<vector<int>> visited(m, vector<int>(n, 0));
        int delrow[4] = {-1, 0, +1, 0};
        int delcol[4] = {0, 1, 0, -1};
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(i == 0 || i == m-1 || j == 0 || j == n-1){
                    if(grid[i][j] == 1){
                        q.push({i, j});
                        visited[i][j] = 1;
                    }
                    else{
                        visited[i][j] = 0;
                    }
                }
            }
        }
        while(!q.empty()){
            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            for(int i = 0; i<4; i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && !visited[nrow][ncol]
                   && grid[nrow][ncol] == 1){
                        visited[nrow][ncol] = 1;
                        q.push({nrow, ncol});
                   }
            }
        }
        int cnt = 0;
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(grid[i][j] == 1 && !visited[i][j]){
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
