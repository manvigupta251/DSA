class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();

        vector<vector<int>> visited(m, vector<int>(n,0));
        vector<vector<int>> updateDist(m, vector<int>(n,0));

        queue<pair<pair<int, int>, int>> q;

        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(mat[i][j] == 0){
                    q.push({{i,j}, 0});
                    visited[i][j] = 1;
                }
            }
        }
        vector<int> delrow = {0,-1,0,1};
        vector<int> delcol = {1,0,-1,0};

        while(!q.empty()){
            auto it = q.front();

            int r = it.first.first;
            int c = it.first.second;
            int dist = it.second;

            q.pop();

            updateDist[r][c] = dist;
            for(int i = 0;i<4;i++) {
	            int nrow = r + delrow[i]; 
	            int ncol = c + delcol[i]; 
	            // check for valid unvisited cell
	            if(nrow >= 0 && nrow < m && ncol >= 0 && ncol < n 
	            && visited[nrow][ncol] == 0) {
	                visited[nrow][ncol] = 1; 
	                q.push({{nrow, ncol}, dist+1});  
	            }
	        }
        }
        return updateDist;

        
    }
};
