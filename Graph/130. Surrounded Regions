class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> visited(n, vector<int>(m, 0));
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if((i == 0 || i == n-1 || j == 0 || j == m-1) && board[i][j] == 'O'){
                    visited[i][j] = 1;
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()){
            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            vector<int> dirRow = {-1, 0, 1, 0};
            vector<int> dirCol = {0, -1, 0, 1};
            for(int i = 0; i<4; i++){
                int newRow = r+dirRow[i];
                int newCol = c+dirCol[i];
                if(newRow >= 0 && newCol >= 0 && newRow < n && newCol < m &&
                 !visited[newRow][newCol] && board[newRow][newCol] == 'O'){
                    visited[newRow][newCol] = 1;
                    q.push({newRow, newCol});
                }
            }
        }
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(board[i][j] == 'O' && visited[i][j] == 0){
                    board[i][j] = 'X';
                }
            }
        }

    }
};
