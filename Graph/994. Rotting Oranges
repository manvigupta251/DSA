class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n));
        queue<pair<pair<int, int>, int>> q;
        //{{r, c}, t}
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    visited[i][j] = 2;
                    q.push({{i, j}, 0});
                }
                else{
                    visited[i][j] = 0;
                }
            }
        }
        int tm = 0;
        int delrow[4] = {-1, 0, +1, 0};
        int delcol[4] = {0, 1, 0, -1};
        while (!q.empty()) {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();
            //yha max islie kia kyuki pucha gaya hain min mins needed to elapse
            //ab max 4 lage toh itne toh chahiye hi na
            tm = max(tm, t);
            for (int i = 0; i < 4; i++) {
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];

                if (nrow >= 0 && ncol >= 0 && nrow < m && ncol < n &&
                    visited[nrow][ncol] != 2 && grid[nrow][ncol] == 1) {
                        visited[nrow][ncol] = 2;
                        q.push({{nrow, ncol}, t+1});
                }
            }
        }
        for(int i = 0; i<m; i++){
            for(int j = 0;  j<n; j++){
                if(grid[i][j] == 1 && visited[i][j] != 2){
                    return -1;
                }
            }
        }
        return tm;
    }
};
