class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        //agr main water cell ke surrounding 2 rkha toh dikkat
        //toh jitne bhi cells surrounding touching water cell hain mark them 1
        int n = isWater.size();
        int m = isWater[0].size();
        vector<vector<int>> matrix(n, vector<int>(m, 0));
        //ab isWater ke har zero se call bfs and mark 1

        //for bfs
        queue<pair<int, pair<int , int>>> q;
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(isWater[i][j] == 1){
                    //this is water cell
                    q.push({0,{i, j}});
                }
            }
        }

        vector<int> dirRow = {-1, 1, 0, 0};
        vector<int> dirCol = {0, 0, 1, -1};

        while(!q.empty()){
            int node = q.front().first;
            int r = q.front().second.first;
            int c = q.front().second.second;
            q.pop();

            for(int i = 0; i<4; i++){
                int newR = dirRow[i] + r;
                int newC = dirCol[i] + c;

                if(newR < n && newC < m && newR >= 0 && newC >= 0 && matrix[newR][newC] == 0 && isWater[newR][newC] == 0){
                    //ab iss zero ke all four ko 1 mark
                    matrix[newR][newC] = node+1;
                    q.push({node+1, {newR, newC}});
                }
            }
        }

        
        return matrix;
    }
};
